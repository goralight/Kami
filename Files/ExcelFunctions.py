import openpyxlimport openpyxl.worksheetfrom openpyxl import load_workbookfrom openpyxl.styles.borders import Sidefrom openpyxl.styles import PatternFill, Borderimport datetimeimport osclass InitExcel:    def __init__(self, ConfigList):        self.ConfigList = ConfigList        print self.ConfigList        global CurrentWorkingExcelPath        global BugLogNumber        BorderBottom = Border(bottom=Side(style="thin"))        BorderBottomRight = Border(bottom=Side(style="thin"), right=Side(style="thin"))        BorderRight = Border(right=Side(style="thin"))        PurpleFill = PatternFill(start_color="bdb0e8",  # No hash needed (#)                                 end_color="bdb0e8",                                 fill_type="solid")        BugLogNumber = ConfigList[5] + "-" + str(ConfigList[6])        Excel = openpyxl.Workbook()        WorkingSheet = Excel.get_sheet_by_name('Sheet')        WorkingSheet.title = BugLogNumber        WorkingSheet.column_dimensions["A"].width = 20.0  # 20=len of A3        WorkingSheet["A1"] = "Bug log for Jira entry:"        WorkingSheet["A2"] = "Reporters Name:"        WorkingSheet["A3"] = "Testing Environment:"        WorkingSheet["A4"] = "Time of Testing:"        WorkingSheet["A4"].border = BorderBottom        SetUpLength = float(len(ConfigList[8]))        WorkingSheet.column_dimensions["B"].width = SetUpLength        WorkingSheet["B1"] = BugLogNumber        WorkingSheet["B2"] = ConfigList[7]        WorkingSheet["B3"] = ConfigList[8]        WorkingSheet["B4"] = datetime.datetime.now().strftime("%H:%M:%S")        WorkingSheet["B4"].border = BorderBottomRight        WorkingSheet["B3"].border = BorderRight        WorkingSheet["B2"].border = BorderRight        WorkingSheet["B1"].border = BorderRight        WorkingSheet["A1"].fill = PurpleFill        WorkingSheet["A2"].fill = PurpleFill        WorkingSheet["A3"].fill = PurpleFill        WorkingSheet["A4"].fill = PurpleFill        WorkingSheet["B1"].fill = PurpleFill        WorkingSheet["B2"].fill = PurpleFill        WorkingSheet["B3"].fill = PurpleFill        WorkingSheet["B4"].fill = PurpleFill        WorkingSheet["A6"] = "Note Type"        WorkingSheet["B6"] = "Time Left"        WorkingSheet["C6"] = "Input"        WorkingSheet["D6"] = "TimeStamp"        WorkingSheet["A6"].border = BorderBottom        WorkingSheet["B6"].border = BorderBottom        WorkingSheet["C6"].border = BorderBottom        WorkingSheet["D6"].border = BorderBottom        WorkingSheet.column_dimensions["D"].width = 10.0        CurrentWorkingExcelPath = ConfigList[4]+"/"+BugLogNumber+".xlsx"        if not os.path.exists(ConfigList[4]):            os.makedirs(ConfigList[4])        Excel.save(CurrentWorkingExcelPath)class InputExcel:    def __init__(self, EntryInput, Row, StartingLength):        self.EntryInput = EntryInput        self.Row = Row        self.StartingLength = StartingLength        self.Excel = load_workbook(filename=CurrentWorkingExcelPath)        self.WorkingSheet = self.Excel.get_sheet_by_name(BugLogNumber)        self.InputRow()    def InputRow(self):        self.WorkingSheet["A" + str(self.Row)] = self.EntryInput[0]        self.WorkingSheet["B" + str(self.Row)] = self.EntryInput[1]        self.WorkingSheet["C" + str(self.Row)] = self.EntryInput[2]        self.WorkingSheet["D" + str(self.Row)] = self.EntryInput[3]        self.Row += 1        # Gets all the rows and figures out the width for the note column        for col in self.WorkingSheet.columns:            max_length = 0            column = col[0].column  # Get the column name            for cell in col:                try:  # Necessary to avoid error on empty cells                    if len(str(cell.value)) > max_length:                        max_length = len(cell.value)                except:                    pass            adjusted_width = (max_length + 2) * 1.03            self.WorkingSheet.column_dimensions[column].width = adjusted_width        self.Excel.save(CurrentWorkingExcelPath)